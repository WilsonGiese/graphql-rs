//! Parser generation for the GraphQL language
//!
//! Spec:
//!     http://facebook.github.io/graphql/

use std::str::FromStr;

grammar;

//! http://facebook.github.io/graphql/#sec-Int-Value
// pub IntValue = {
//     <IntegerPart>
// };
//
// pub IntegerPart = {
//     <OptionalNegativeSign> "0",
//     <OptionalNegativeSign> <NonZeroDigit> <Digit>
// };
//
// pub Digit = {
//     <NonZeroDigit>
// };

pub IntValue = {
    <Int>
};

Int: String = r"-?((0)|([1-9][0-9]*))" => String::from_str(<>).unwrap();

pub Comment = {
    <CommentCharacters> <LineTerminator>
};

pub Ignored = {
    <Comment>
    <Comma>
    <LineTerminator>
    <UnicodeBOM>
    <WhiteSpace>
};

//! Unicode Byte Order Mark U+FEFF
UnicodeBOM: String = r"\x{FEFF}" => String::from_str(<>).unwrap();

//! Horizontal Tab U+9 or Space U+20
WhiteSpace: String = r"\x{9}|\x{20}" => String::from_str(<>).unwrap();

//! New Line U+A or Carriage Return U+D or both U+A U+D
LineTerminator: String = r"((\x{A})|(\x{D}\x{A})|(\x{D}))" => String::from_str(<>).unwrap();

CommentCharacters: String = r"#(\x{9}|[\x{20}-\x{FFFF}])*" => String::from_str(<>).unwrap();

Comma: String = r"," => String::from_str(<>).unwrap();
